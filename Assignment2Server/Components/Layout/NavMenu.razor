@using Assignment2Library.Data.Models
@using Assignment2Server.Services
@implements IDisposable
@inject IUserService UserService
@inject AuthenticationStateProvider AuthStateProvider

@inject NavigationManager NavigationManager

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Blog</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="nav flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <AuthorizeView>
            <Authorized>
                @if (isAdminApproved)
                {
                    <div class="nav-item px-3">
                        <NavLink class="nav-link" href="/admin/users">
                            <span class="bi bi-person-fill-nav-menu" aria-hidden="true"></span> Admin
                        </NavLink>
                    </div>
                }
            </Authorized>
        </AuthorizeView>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/articles">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Articles
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="auth">
                <span class="bi bi-lock-nav-menu" aria-hidden="true"></span>
                @if (currentUser != null && isAdminApproved)
                {
                    <span>Authorized</span>
                }
                else
                {
                    <span>Auth Required</span>
                }
            </NavLink>
        </div>


        <AuthorizeView>
            <Authorized>
                <div class="nav-item px-3">
                    <form action="Account/Logout" method="post">
                        <AntiforgeryToken />
                        <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                        <button type="submit" class="nav-link">
                            <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
                        </button>
                    </form>
                </div>
            </Authorized>
            <NotAuthorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Register">
                        <span class="bi bi-person-nav-menu" aria-hidden="true"></span> Register
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Login">
                        <span class="bi bi-person-badge-nav-menu" aria-hidden="true"></span> Login
                    </NavLink>
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </nav>
</div>

@code {
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

}

@code {
    // Add these fields
    private bool isAdminApproved;
    private User? currentUser;
    private bool isLoading; // Add loading flag
    private SemaphoreSlim semaphore = new(1, 1); // Add semaphore

    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += HandleLocationChanged;
        await LoadUserStatus();
    }

    private async Task LoadUserStatus()
    {
        await semaphore.WaitAsync();
        try
        {
            if (isLoading) return;

            isLoading = true;
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity?.IsAuthenticated == true)
            {
                currentUser = await UserService.GetUserByEmailAsync(user.Identity.Name!);
                isAdminApproved = currentUser?.Role == "Admin" && currentUser.Approved;
            }
            else
            {
                currentUser = null;
                isAdminApproved = false;
            }
        }
        finally
        {
            isLoading = false;
            semaphore.Release();
        }
    }

    private async void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        await LoadUserStatus();
        StateHasChanged();
    }

    public void Dispose()
    {
        // Combine all cleanup operations here
        NavigationManager.LocationChanged -= HandleLocationChanged;
        semaphore?.Dispose(); // Clean up the semaphore
    }
}