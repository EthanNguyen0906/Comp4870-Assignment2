@page "/admin/users"
@rendermode InteractiveServer
@using Assignment2Library.Data
@using Assignment2Library.Data.Models
@using Assignment2Server.Services
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.EntityFrameworkCore
@using Microsoft.JSInterop
@inject IUserService UserService
@implements IAsyncDisposable
@inject IDbContextFactory<YourDbContext> DbContextFactory


<PageTitle>Admin - Users</PageTitle>

<h1>User Management</h1>

@if (users == null)
{
    <p><em>Loading users...</em></p>
}
else if (!users.Any())
{
    <div class="alert alert-info">No users found.</div>
}
else
{
    <div>
        <QuickGrid class="table" TGridItem="User" Items="users.AsQueryable()">
            <PropertyColumn Property="@(user => user.Email)" Title="Email" Sortable="true" />
            <PropertyColumn Property="@(user => user.FirstName)" Title="First Name" Sortable="true" />
            <PropertyColumn Property="@(user => user.LastName)" Title="Last Name" Sortable="true" />
            <PropertyColumn Property="@(user => user.Role)" Title="Role" Sortable="true" />
            <PropertyColumn Property="@(user => user.Approved)" Title="Approved" Sortable="true" />
            
            <TemplateColumn Title="Actions" Context="user">
                    <button class="btn btn-sm btn-primary" @onclick="() => ToggleRole(user.Id)">
                        @(user.Role == "Admin" ? "Demote" : "Promote")
                    </button>
                    <button class="btn btn-sm @(user.Approved ? "btn-warning" : "btn-success")" 
                            @onclick="() => ToggleApproval(user.Id)">
                        @(user.Approved ? "Revoke" : "Approve")
                    </button>
                    <button class="btn btn-sm btn-danger" @onclick="() => DeleteUser(user.Id)">
                        Delete
                    </button>
            </TemplateColumn>
        </QuickGrid>
    </div>
}

@code {
    [Inject]
    private IJSRuntime JS { get; set; } = default!;

    private List<User>? users;
    private SemaphoreSlim _loadLock = new(1, 1);
    private CancellationTokenSource _cts = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        await _loadLock.WaitAsync(_cts.Token);
        try
        {
            using var context = await DbContextFactory.CreateDbContextAsync(_cts.Token);
            users = await context.Users.AsNoTracking().ToListAsync(_cts.Token);
            StateHasChanged();
        }
        catch (OperationCanceledException)
        {
            // Normal during component disposal
        }
        finally
        {
            _loadLock.Release();
        }
    }

   public ValueTask DisposeAsync()
    {
        _cts.Cancel();
        _cts.Dispose();
        _loadLock.Dispose();
        return ValueTask.CompletedTask;
    }


    private async Task ToggleRole(string id)
    {
        var user = users?.FirstOrDefault(u => u.Id == id);
        if (user != null)
        {
            if (user.Role == "Admin")
            {
                await UserService.DemoteUserAsync(id);
            }
            else
            {
                await UserService.PromoteUserAsync(id);
            }
            await LoadUsers();
        }
    }

    private async Task ToggleApproval(string id)
    {
        var user = users?.FirstOrDefault(u => u.Id == id);
        if (user != null)
        {
            if (user.Approved)
            {
                await UserService.UnapproveUserAsync(id);
            }
            else
            {
                await UserService.ApproveUserAsync(id);
            }
            await LoadUsers();
        }
    }

    private async Task DeleteUser(string id)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this user?");
        if (confirmed)
        {
            await UserService.DeleteUserAsync(id);
            await LoadUsers();
        }
    }
}