@page "/articles/create"
@using Assignment2Library.Data.Models
@using Assignment2Server.Data
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Identity
@inject Assignment2Server.Services.ArticlesApiClient ArticleService
@rendermode InteractiveServer
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<User> UserManager



<h2>Create a New Article</h2>

<EditForm Model="@article" OnValidSubmit="HandleValidSubmit" FormName="CreateArticleForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Title</label>
        <InputText @bind-Value="article.Title" class="form-control" required />
        <ValidationMessage For="@(() => article.Title)" />
    </div>

    <div class="form-group">
        <label>Body</label>
        <InputTextArea @bind-Value="article.Body" class="form-control" rows="5" required />
        <ValidationMessage For="@(() => article.Body)" />
    </div>

    <div class="form-group">
        <label>Start Date</label>
        <InputDate @bind-Value="article.StartDate" class="form-control" />
        <ValidationMessage For="@(() => article.StartDate)" />
    </div>

    <div class="form-group">
        <label>End Date</label>
        <InputDate @bind-Value="article.EndDate" class="form-control" />
        <ValidationMessage For="@(() => article.EndDate)" />
    </div>

    <div class="d-flex justify-content-between mt-3 mb-3">
        <button class="btn btn-secondary mb-3" @onclick="BackToArticles">‚Üê Back to Articles</button>
        <button type="submit" class="btn btn-success mb-3">Submit</button>
    </div>
</EditForm>

@code {
    private Article article = new Article
    {
        StartDate = DateTime.Today,
        EndDate = DateTime.Today
    };

    private async Task HandleValidSubmit()
    {
        // Retrieve the authentication state
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var claimsUser = authState.User;

        if (claimsUser.Identity?.IsAuthenticated == true)
        {
            // Use the UserManager to get the actual User object from the username.
            var user = await UserManager.FindByNameAsync(claimsUser.Identity.Name);
            article.ContributorUsername = user.UserName;
        }

        await ArticleService.CreateArticleAsync(article);
        Navigation.NavigateTo("/articles");
    }

    private Task BackToArticles()
    {
        Navigation.NavigateTo("/articles");
        return Task.CompletedTask;
    }
}